<?php

/**
 * @file
 * Provides a visitor context plugin for targeting based on user agent.
 */

/**
 * Implements hook_page_build().
 */
function personalize_browscap_context_page_build(&$page) {
  $user_agent = browscap_get_browser();
  $user_agent_params = personalize_browscap_context_get_user_agent_params();
  $personalize_browscap_context = array_intersect_key($user_agent, $user_agent_params);

  $page['page_top']['personalize_browscap_context'] = array(
    '#attached' => array(
      'js' => array(
        drupal_get_path('module', 'personalize_browscap_context') . '/js/personalize_browscap_context.js' => array(),
        array(
          'data' => array('personalize_browscap_context' => $personalize_browscap_context),
          'type' => 'setting',
        ),
      ),
    )
  );
}

/**
 * Implements hook_personalize_visitor_contexts().
 */
function personalize_browscap_context_personalize_visitor_context() {
  $info = array();
  $path = drupal_get_path('module', 'personalize_browscap_context') . '/plugins';
  $info['browscap_context'] = array(
    'path' => $path . '/visitor_context',
    'handler' => array(
      'file' => 'BrowscapContext.inc',
      'class' => 'BrowscapContext',
    ),
  );

  return $info;
}

/**
 * Handler for loading available options for user agent parameters from browscap.
 *
 * @return array
 *   Array of available options for each of parameter of user agent.
 *
 * @TODO: Add caching for loading options.
 */
function personalize_browscap_context_get_all_browscap_options() {
  // Get user agent params with titles.
  $browscap_params = personalize_browscap_context_get_user_agent_params();

  // Get machine names of user agent params.
  $params = array_keys($browscap_params);

  // Load all of records from browscap.
  $query_result = db_select('browscap', 'b')
    ->fields('b', array('data'))
    ->execute();

  // Fetch options and group by user agent params.
  $options = array();
  foreach ($query_result as $row) {
    foreach ($params as $param) {
      if (!isset($options[$param])) {
        $options[$param] = array();
      }

      if (!empty($row->data) && $data = unserialize($row->data)) {
        if (!empty($data[$param]) && ($option = $data[$param]) && empty($options[$param][$option])) {
          $options[$param][$option] = $option;
        };
      }
    }
  }

  return $options;
}

/**
 * Return available user agent parameters.
 */
function personalize_browscap_context_get_user_agent_params() {
  $params = array(
    'browser' => t('Browser'),
    'platform' => t('Platform'),
    'ismobiledevice' => t('Is Mobile Device'),
    'istablet' => t('Is Tablet'),
    'device_type' => t('Device Type'),
  );

  return $params;
}

/**
 * Implements hook_FORM_ID_form_alter().
 */
function personalize_browscap_context_form_personalize_url_context_admin_form_alter(&$form, &$form_state, $form_id) {
  $personalize_browscap_contexts = variable_get('personalize_browscap_contexts', array());
  $user_agent_options = personalize_browscap_context_get_all_browscap_options();

  $form['personalize_browscap_context'] = array(
    '#title' => t('User Agent'),
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#tree' => TRUE,
  );

  // Browser context.
  $form['personalize_browscap_context']['browser'] = array(
    '#title' => t('Browsers'),
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $browser_visibility = isset($personalize_browscap_contexts['browser']['visibility']) ? $personalize_browscap_contexts['browser']['visibility'] : 0;
  $form['personalize_browscap_context']['browser']['visibility'] = array(
    '#title' => t('Show specific browsers'),
    '#type' => 'radios',
    '#options' => array(
      0 => t('All browsers except those listed.'),
      1 => t('Only the listed browsers.'),
    ),
    '#default_value' => $browser_visibility,
  );

  asort($user_agent_options['browser'], SORT_NATURAL);
  $browser_list = isset($personalize_browscap_contexts['browser']['list']) ? $personalize_browscap_contexts['browser']['list'] : array();
  $form['personalize_browscap_context']['browser']['list'] = array(
    '#title' => t('Browsers List'),
    '#type' => 'checkboxes',
    '#options' => $user_agent_options['browser'],
    '#description' => t('Specify browsers for processing. <strong>Note:</strong> rest of browsers will be marked as <i>"Other"</i>.'),
    '#default_value' => $browser_list,
    '#field_prefix' => '<div style="height: 250px; overflow-y: scroll">',
    '#field_suffix' => '</div>',
  );

  // Platform context.
  $form['personalize_browscap_context']['platform'] = array(
    '#title' => t('Platforms'),
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $platform_visibility = isset($personalize_browscap_contexts['platform']['visibility']) ? $personalize_browscap_contexts['platform']['visibility'] : 0;
  $form['personalize_browscap_context']['platform']['visibility'] = array(
    '#title' => t('Show specific platforms'),
    '#type' => 'radios',
    '#options' => array(
      0 => t('All platforms except those listed.'),
      1 => t('Only the listed platforms.'),
    ),
    '#default_value' => $platform_visibility,
  );

  asort($user_agent_options['platform'], SORT_NATURAL);
  $platform_list = isset($personalize_browscap_contexts['platform']['list']) ? $personalize_browscap_contexts['platform']['list'] : array();
  $form['personalize_browscap_context']['platform']['list'] = array(
    '#title' => t('Platforms List'),
    '#type' => 'checkboxes',
    '#options' => $user_agent_options['platform'],
    '#description' => t('Specify platforms for processing. <strong>Note:</strong> rest of platforms will be marked as <i>"Other"</i>.'),
    '#default_value' => $platform_list,
    '#field_prefix' => '<div style="height: 250px; overflow-y: scroll">',
    '#field_suffix' => '</div>',
  );

  // Device Type context.
  $form['personalize_browscap_context']['device_type'] = array(
    '#title' => t('Device Type'),
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $device_type_visibility = isset($personalize_browscap_contexts['device_type']['visibility']) ? $personalize_browscap_contexts['device_type']['visibility'] : 0;
  $form['personalize_browscap_context']['device_type']['visibility'] = array(
    '#title' => t('Show specific device types'),
    '#type' => 'radios',
    '#options' => array(
      0 => t('All device types except those listed.'),
      1 => t('Only the listed device types.'),
    ),
    '#default_value' => $device_type_visibility,
  );

  asort($user_agent_options['device_type'], SORT_NATURAL);
  $device_type_list = isset($personalize_browscap_contexts['device_type']['list']) ? $personalize_browscap_contexts['device_type']['list'] : array();
  $form['personalize_browscap_context']['device_type']['list'] = array(
    '#title' => t('Device Types List'),
    '#type' => 'checkboxes',
    '#options' => $user_agent_options['device_type'],
    '#description' => t('Specify device types for processing. <strong>Note:</strong> rest of device types will be marked as <i>"Other"</i>.'),
    '#default_value' => $device_type_list,
    '#field_prefix' => '<div style="height: 250px; overflow-y: scroll">',
    '#field_suffix' => '</div>',
  );

  $form['#validate'][] = 'personalize_browscap_context_form_personalize_url_context_admin_form_validate';
  $form['#submit'][] = 'personalize_browscap_context_form_personalize_url_context_admin_form_submit';
}

/**
 * Validation callback for validating user agent options for context.
 */
function personalize_browscap_context_form_personalize_url_context_admin_form_validate($form, &$form_state) {
  // @TODO: add validating browsers.
  // @TODO: add validating availability of contexts combinations.
}

/**
 * Submission callback for saving user agent options for context.
 */
function personalize_browscap_context_form_personalize_url_context_admin_form_submit($form, &$form_state) {
  $personalize_browscap_contexts = array();
  if (!empty($form_state['values']['personalize_browscap_context'])) {
    $personalize_browscap_contexts = $form_state['values']['personalize_browscap_context'];
    foreach (array('browser', 'platform', 'device_type') as $param) {
      $options_values = array_filter($personalize_browscap_contexts[$param]['list']);
      $personalize_browscap_contexts[$param]['list'] = $options_values;
    }
  }
  variable_set('personalize_browscap_contexts', $personalize_browscap_contexts);
}

/**
 * Return browsers available for context.
 */
function _personalize_browscap_context_get_fields_contexts_options() {
  $personalize_browscap_contexts = variable_get('personalize_browscap_contexts', array());
  $browscap_options = personalize_browscap_context_get_all_browscap_options();
  $fields_contexts_options = array();
  foreach ($browscap_options as $param => $browscap_param_options) {
    switch ($param) {
      case 'browser':
      case 'platform':
      case 'device_type':
        $context_settings = $personalize_browscap_contexts[$param];
        if ($context_settings['visibility'] === '0') {
          $contexts_options = array_diff($browscap_param_options, $context_settings['list']);
        }
        else {
          $contexts_options = array_combine($context_settings['list'], $context_settings['list']);
        }
        break;

      case 'ismobiledevice':
      case 'istablet':
        $contexts_options = array(
          'true' => t('Yes'),
          'false' => t('No'),
        );
        break;
    }

    $fields_contexts_options[$param] = $contexts_options;
  }

  return $fields_contexts_options;
}
